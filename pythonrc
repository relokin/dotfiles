#!/usr/bin/python
# -*- coding: utf-8 -*-

"""Interactive python setup file.

This file is executed when the Python interactive shell is started if
$PYTHONSTARTUP is in your environment and points to this file. It adds
support for history and autocompletion.

"""

__author__    = 'Nikos Nikoleris'
__copyright__ = 'Copyright 2012, Nikos Nikoleris'
__credits__   = ['Nikos Nikoleris']

__version__    = '0.1'
__licence__    = 'GPL'
__maintainer__ = 'Nikos Nikoleris'
__email__      = 'nikos.nikoleris@it.uu.se'
__status__     = 'Development'

import sys
import os
import atexit

# Color Support
class TermColors(dict):
    """Gives easy access to ANSI color codes. Attempts to fall back to no color
    for certain TERM values. (Mostly stolen from IPython.)"""

    COLOR_TEMPLATES = (
        ("Black"       , "0;30"),
        ("Red"         , "0;31"),
        ("Green"       , "0;32"),
        ("Brown"       , "0;33"),
        ("Blue"        , "0;34"),
        ("Purple"      , "0;35"),
        ("Cyan"        , "0;36"),
        ("LightGray"   , "0;37"),
        ("DarkGray"    , "1;30"),
        ("LightRed"    , "1;31"),
        ("LightGreen"  , "1;32"),
        ("Yellow"      , "1;33"),
        ("LightBlue"   , "1;34"),
        ("LightPurple" , "1;35"),
        ("LightCyan"   , "1;36"),
        ("White"       , "1;37"),
        ("Normal"      , "0"),
    )

    NoColor = ''
    _base  = '\001\033[%sm\002'

    def __init__(self):
        if os.environ.get('TERM') in (
            'xterm-color', 'xterm-256color', 'linux', 'screen',
            'screen-256color', 'screen-bce', 'xterm'):
            self.update(dict([(k, self._base % v) for k, v in self.COLOR_TEMPLATES]))
        else:
            self.update(dict([(k, self.NoColor) for k, v in self.COLOR_TEMPLATES]))
_c = TermColors()

# Enable Color Prompts
sys.ps1 = '%s>>> %s' % (_c['Green'], _c['Normal'])
sys.ps2 = '%s... %s' % (_c['Red'], _c['Normal'])

# Tab Completion
# from http://www.doughellmann.com/PyMOTW/rlcompleter/index.html
try:
 import readline
except ImportError:
 # Silently ignore missing readline module
 pass
else:
 import rlcompleter
 readline.parse_and_bind("tab: complete")

# History
# from http://dotfiles.org/~remote/.pythonrc.py
histfile = os.path.join(os.environ["HOME"], ".python_history")
try:
 readline.read_history_file(histfile)
except IOError:
 pass

atexit.register(readline.write_history_file, histfile)
del os, histfile

